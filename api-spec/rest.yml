openapi: '3.0.2'
info:
  title: Transcendence backend REST API
  version: '1.0'
servers:
  - url: http://localhost:8000
components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          minimum: 100
          maximum: 600
        message:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        avatar:
          type: string
    UserCreate:
      type: object
      properties:
        name:
          type: string
        avatar:
          type: string
        password:
          type: string
        email:
          type: string
        is_staff:
          type: boolean
          default: false
        is_superuser:
          type: boolean
          default: false
      required:
        - "name"
        - "password"
        - "email"

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        avatar:
          type: string
        password:
          type: string

    FriendRequest:
      type: object
      properties:
        id:
          type: integer
        sender_id: 
          type: integer
        sender_username:
          type: string
        message:
          type: string

    TOTP:
      type: object
      properties:
        secret:
          type: string
          example: "JBSWY3DPE"

    GameCreate:
      type: object
      properties:
        user_id:
          type: integer
      required:
       - "user_id"

    Game:
      type: object
      properties:
        id:
          type: integer
        players:
          type: array
          items:
            type: string
        status:
          type: string
        score1:
          type: integer
        score2:
          type: integer
        timestamp:
          type: string
    Stats:
      type: object
      properties:
        games_played:
          type: integer
        games_won:
          type: integer
        games_lost:
          type: integer
        total_points:
          type: integer
        win_streaks:
          type: integer

  parameters:    
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
    typeParam:
      name: type
      in: query
      description: type of game
      required: true
      schema:
        type: string
        enum: [ "running", "finished", "pending", "paused" ]
    meParam:
      name: me
      in: query
      description: me
      required: false
      schema:
        type: boolean
    activeParam:
      name: active
      in: query
      description: active games
      required: false
      schema:
        type: boolean
  responses:
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    OK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "OK"
    authorized:
      description: User is authorized
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: "eyJ0eXAiO"
              refresh_token:
                type: string
                example: "eyJ0eXAiO"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /healthcheck:
    get:
      tags:
        - "Healthcheck"
      responses:
        '200':   
          $ref: '#/components/responses/OK'
        default:
          $ref: '#/components/responses/GeneralError'

  /auth:
    post:
      tags:
        - "Auth"

      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          $ref: "#/components/responses/authorized"
        default:
          $ref: '#/components/responses/GeneralError'
  
  /auth/refresh:
    get:
      tags:
        - "Auth"
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: "#/components/responses/authorized"
        default:
          $ref: '#/components/responses/GeneralError'
  
  /auth/verify:
    post:
      tags:
        - "Auth"
      security:
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                2fa_code:
                  type: string
      responses:
        '200':
          $ref: "#/components/responses/authorized"
        default:
          $ref: '#/components/responses/GeneralError'
  
  /logout:
    post:
      tags:
        - "Auth"
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          $ref: "#/components/responses/OK"
        default:
          $ref: '#/components/responses/GeneralError'
## Users Tag

  /users:
    get:
      tags:
        - "Users"
      security:
        - bearerAuth: [ ]
      
      parameters:
        - name: skip
          in: query
          description: 'Skip'
          required: false
          schema:
            $ref: '#/components/parameters/skipParam'
        - name: limit
          in: query
          description: 'Limit'
          required: false
          schema:
            $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "Successful users"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - "Users"
      security:
        - bearerAuth: [ ]
      description: "Username update endpoint"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '202':
          description: "Successful Update of Username"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/GeneralError'

  /users/me:
    get:
      tags:
        - "Users"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Currently logged in user"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - "Users"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: "Successful user creation"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/GeneralError'  
    delete:
      tags:
        - "Users"
      security:
        - bearerAuth: [ ]
      description: "Deletion of user currently logged in user"
      responses:
        '204':
          description: "Successful deletion of currently logged in user"
        default:
          $ref: '#/components/responses/GeneralError'
      
  /users/{id}:
    get:
      tags:
        - "Users"
      security:
        - bearerAuth: [ ]
      description: "Retrieval of user by ID"
      responses:
        '200':
          description: "Successful retrieval of user by ID"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/GeneralError'

  /block:
    get:
      tags:
        - "BlockedUsers"
      security:
        - bearerAuth: [ ]
      description: "Retrieval of blocked users of currently logged in user"
      responses:
        '200':
          description: "Successful retrieval of blocked users of currently logged in user"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - "BlockedUsers"
      security:
        - bearerAuth: [ ]
      description: "Block user by user_id"
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                user_id:
                  type: integer
      responses:
        '200':
          description: "Successful block"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/GeneralError'
    put:
      tags:
        - "BlockedUsers"
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                user_id:
                  type: integer
      responses:
        '200':
          description: "Successful unblock"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/GeneralError'

  /2fa:
    get:
      tags:
        - "2FA"
      security:
        - bearerAuth: [ ]
      description: "Retrieve the 2fa user secret"
      responses:
        '200':
          description: "Retrieval of 2fa secret of currently logged in user"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/TOTP'
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - "2FA"
      security:
        - bearerAuth: [ ]
      description: "Creates a TOTP Secret for currently logged in user"
      responses:
        '200':
          description: "Successful 2fa enabled"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/TOTP'
        default:
          $ref: '#/components/responses/GeneralError'
    put:
      tags:
        - "2FA"
      security:
        - bearerAuth: [ ]
      description: "Updates the TOTP Secret for currently logged in user"
      responses:
        '200':
          description: "Successful secret update"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/TOTP'
        default:
          $ref: '#/components/responses/GeneralError'
    delete:
      tags:
        - "2FA"
      security:
        - bearerAuth: [ ]
      description: "Disables 2fa for currently logged in user if enabled"
      responses:
        '200':
          description: "Successful 2fa disabled"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/responses/OK'
        default:
          $ref: '#/components/responses/GeneralError'
  
  /2fa/verify:
    post:
      tags:
        - "2FA"
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                2fa_code:
                  type: string
      responses:
        '200':
          description: "Successful 2fa verification"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/responses/authorized'
        default:
          $ref: '#/components/responses/GeneralError'
      


# Friends Tag
  /friends:
    get:
      tags:
        - "Friends"
      security:
        - bearerAuth: [ ]
      description: "Retrieval of friends of currently logged in user"
      responses:
        '200':
          description: "Successful retrieval of friends of currently logged in user"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/GeneralError'
  
  /friendrequest/incoming:
    get:
      tags:
        - "Friends"
      security:
        - bearerAuth: [ ]
      description: "Retrieval of incoming friend requests of currently logged in user"
      responses:
        '200':
          description: "Successful retrieval of incoming friend requests of currently logged in user"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/GeneralError'
  
  /friendrequest:
    get:
      tags:
        - "Friends"
      security:
        - bearerAuth: [ ]
      description: "Retrieval of friend requests of currently logged in user"
      responses:
        '200':
          description: "Successful retrieval of friend requests of currently logged in user"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FriendRequest'
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - "Friends"
      security:
        - bearerAuth: [ ]
      description: "Send friend request to user"
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                receiver_id:
                  type: integer
                message:
                  type: string
      responses:
        '202':
          description: "Successful friend request sent"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/FriendRequest'
        default:
          $ref: '#/components/responses/GeneralError'

  /friendrequest/accept:
    post:
      tags:
        - "Friends"
      security:
        - bearerAuth: [ ]
      description: "Accept friend request"
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                request_id:
                  type: integer
      responses:
        '202':
          description: "Successful friend request accepted"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/FriendRequest'
        default:
          $ref: '#/components/responses/GeneralError'

  /friendrequest/decline:
    post:
      tags:
        - "Friends"
      security:
        - bearerAuth: [ ]
      description: "Decline friend request"
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                request_id:
                  type: integer
      responses:
        '202':
          description: "Successful friend request declined"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/FriendRequest'
        default:
          $ref: '#/components/responses/GeneralError'

  /unfriend:
    post:
      tags:
        - "Friends"
      security:
        - bearerAuth: [ ]
      description: "Unfriend user"
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                friend_id:
                  type: integer
      responses:
        '202':
          description: "Successful unfriend"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/GeneralError'

# Stats Tag
  /users/{id}/stats:
    get:
      tags:
        - "Stats"
      security:
        - bearerAuth: [ ]
      description: "Retrieval of stats of user by ID"
      responses:
        '200':
          description: "Successful retrieval of stats of user by ID"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/Stats'
        default:
          $ref: '#/components/responses/GeneralError'
    
  /leaderboard:
    get:
      tags:
        - "Stats"
      security:
        - bearerAuth: [ ]
      description: "Retrieval of leaderboard"
      responses:
        '200':
          description: "Successful retrieval of leaderboard"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stats'
        default:
          $ref: '#/components/responses/GeneralError'

  /games:
    get:
      tags:
        - "Pong"
      security:
        - bearerAuth: [ ]
      description: "Retrieval of games"
      parameters:
        - name: skip
          in: query
          description: 'Skip'
          required: false
          schema:
            $ref: '#/components/parameters/skipParam'
        - name: limit
          in: query
          description: 'Limit'
          required: false
          schema:
            $ref: '#/components/parameters/limitParam'
        - name: type
          in: query
          description: 'Type'
          required: true
          schema:
            $ref: '#/components/parameters/typeParam'
        - name: me
          in: query
          description: 'Me'
          required: false
          schema:
            $ref: '#/components/parameters/meParam'
      responses:
        '200':
          description: "Successful games"
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        default:
          $ref: '#/components/responses/GeneralError'
      
    post:
      tags:
        - "Pong"
      security:
        - bearerAuth: [ ]
      
      description: 'Adds new game with userID as playerOne'

      responses:
        '201':
          description: "Game set up, waiting for player 2"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Game"
        default:
          $ref: "#/components/responses/GeneralError"
    
    delete:
      tags:
        - "Pong"
      security:
        - bearerAuth: [ ]
      description: "Deletes pending game of currently logged in user"
      responses:
        '200':
          description: "Successful deletion game"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/Game'
        default:
          $ref: '#/components/responses/GeneralError'

  /games/{game_id}:
    get:
      tags:
        - "Pong"
      security:
        - bearerAuth: [ ]
      description: "Retrieval of game by ID"
      responses:
        '200':
          description: "Successful retrieval of game by ID"
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/Game'
        default:
          $ref: '#/components/responses/GeneralError'

  #   get:
  #     parameters:
  #       - name: skip
  #         in: query
  #         description: 'Skip'
  #         required: false
  #         schema:
  #           $ref: '#/components/parameters/skipParam'
  #       - name: limit
  #         in: query
  #         description: 'Limit'
  #         required: false
  #         schema:
  #           $ref: '#/components/parameters/limitParam'
  #       - name: active
  #         in: query
  #         description: 'Active'
  #         required: false
  #         schema:
  #           $ref: '#/components/parameters/activeParam'
  #     responses:
  #       '201':
  #         description: "Successful games"
  #         content:
  #           'application/json':
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Game'
  # /games/{game_id}/join:
  #   put:  
  #     description: "User Me join game_id"
  #     responses:
  #       '202':
  #         description: "Join game {id}"
  #         content:
  #           'application/json':
  #             schema:
  #               type: object
  #               items:
  #                 $ref: '#/components/schemas/Game'
